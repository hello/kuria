#include "preprocessor.h"
#include "haltijamath.h"
#include "filters.h"


using namespace Eigen;
/*
Preprocessor::Preprocessor()
: _num_samples_per_frame(1) {
    
 
}
 */


PreprocessorPtr_t Preprocessor::createWithDefaultHighpassFilter(const int num_range_bins,const int num_frames_in_segment,const int num_frames_to_wait_between_segments) {
    
    MatrixXf hpf;
    hpf.resize(501,1);
    //0.05 nyquist highpass filter
    /*
     hpf << -5.09552735e-04,  -5.19377203e-04,  -5.27693802e-04,
     -5.32186651e-04,  -5.29028364e-04,  -5.13008822e-04,
     -4.77777630e-04,  -4.16194545e-04,  -3.20776300e-04,
     -1.84222709e-04,  -6.21914388e-18,   2.37044837e-04,
     5.30067912e-04,   8.79641608e-04,   1.28322862e-03,
     1.73474745e-03,   2.22425768e-03,   2.73778937e-03,
     3.25733617e-03,   3.76102551e-03,   4.22347225e-03,
     4.61631472e-03,   4.90892434e-03,   5.06927203e-03,
     5.06492751e-03,   4.86416063e-03,   4.43710843e-03,
     3.75696714e-03,   2.80116515e-03,   1.55247220e-03,
     -2.79349436e-17,  -1.85994794e-03,  -4.02321562e-03,
     -6.47735573e-03,  -9.20143834e-03,  -1.21661247e-02,
     -1.53340142e-02,  -1.86602635e-02,  -2.20934658e-02,
     -2.55767708e-02,  -2.90492135e-02,  -3.24472146e-02,
     -3.57062081e-02,  -3.87623433e-02,  -4.15542096e-02,
     -4.40245269e-02,  -4.61217462e-02,  -4.78015080e-02,
     -4.90279088e-02,  -4.97745343e-02,   9.50479234e-01,
     -4.97745343e-02,  -4.90279088e-02,  -4.78015080e-02,
     -4.61217462e-02,  -4.40245269e-02,  -4.15542096e-02,
     -3.87623433e-02,  -3.57062081e-02,  -3.24472146e-02,
     -2.90492135e-02,  -2.55767708e-02,  -2.20934658e-02,
     -1.86602635e-02,  -1.53340142e-02,  -1.21661247e-02,
     -9.20143834e-03,  -6.47735573e-03,  -4.02321562e-03,
     -1.85994794e-03,  -2.79349436e-17,   1.55247220e-03,
     2.80116515e-03,   3.75696714e-03,   4.43710843e-03,
     4.86416063e-03,   5.06492751e-03,   5.06927203e-03,
     4.90892434e-03,   4.61631472e-03,   4.22347225e-03,
     3.76102551e-03,   3.25733617e-03,   2.73778937e-03,
     2.22425768e-03,   1.73474745e-03,   1.28322862e-03,
     8.79641608e-04,   5.30067912e-04,   2.37044837e-04,
     -6.21914388e-18,  -1.84222709e-04,  -3.20776300e-04,
     -4.16194545e-04,  -4.77777630e-04,  -5.13008822e-04,
     -5.29028364e-04,  -5.32186651e-04,  -5.27693802e-04,
     -5.19377203e-04,  -5.09552735e-04;
     */
    
    hpf << 7.202008766452209e-05,
    7.119692727065647e-05,
    7.041225210884141e-05,
    6.96635412789277e-05,
    6.894813533681396e-05,
    6.826323705200386e-05,
    6.760591227514852e-05,
    6.697309091607535e-05,
    6.636156803173764e-05,
    6.576800502414862e-05,
    6.518893094785323e-05,
    6.462074392665728e-05,
    6.405971267895249e-05,
    6.350197815161183e-05,
    6.294355526105214e-05,
    6.2380334741697e-05,
    6.180808510022202e-05,
    6.122245467546631e-05,
    6.061897380252971e-05,
    5.999305708047748e-05,
    5.9340005742338975e-05,
    5.865501012635674e-05,
    5.7933152247245073e-05,
    5.7169408466336676e-05,
    5.6358652258738447e-05,
    5.549565707693705e-05,
    5.4575099308328615e-05,
    5.359156132605094e-05,
    5.253953463068069e-05,
    5.1413423081687174e-05,
    5.0207546216447e-05,
    4.8916142655179076e-05,
    4.7533373589867125e-05,
    4.605332635511958e-05,
    4.4470018078812074e-05,
    4.2777399410963796e-05,
    4.096935832766672e-05,
    3.903972400903848e-05,
    3.698227078779654e-05,
    3.4790722167014696e-05,
    3.245875490399577e-05,
    2.9980003158218195e-05,
    2.7348062700701086e-05,
    2.4556495182122354e-05,
    2.1598832457302275e-05,
    1.846858096340466e-05,
    1.5159226148556718e-05,
    1.1664236949327693e-05,
    7.97707031284267e-06,
    4.091175762017783e-06,
    1.0167628683001432e-18,
    -4.303008448363345e-06,
    -8.824394561385163e-06,
    -1.3570692114602606e-05,
    -1.8548418947016692e-05,
    -2.376407220230233e-05,
    -2.9224123549048474e-05,
    -3.493501438137083e-05,
    -4.09031510050883e-05,
    -4.71348998106753e-05,
    -5.3636582437728634e-05,
    -6.0414470932953374e-05,
    -6.747478290561463e-05,
    -7.48236766833604e-05,
    -8.246724647150896e-05,
    -9.041151751935303e-05,
    -9.866244129678497e-05,
    -0.00010722589068343002,
    -0.00011610765517558831,
    -0.00012531343611176416,
    -0.00013484884192230197,
    -0.00014471938340456547,
    -0.00015493046902816164,
    -0.00016548740027273417,
    -0.00017639536700170936,
    -0.00018765944287527322,
    -0.0001992845808061992,
    -0.0002112756084600087,
    -0.00022363722380558862,
    -0.00023637399071590136,
    -0.00024949033462516227,
    -0.0002629905382428907,
    -0.00027687873732990133,
    -0.0002911589165379612,
    -0.0003058349053166775,
    -0.0003209103738907139,
    -0.0003363888293098085,
    -0.0003522736115743106,
    -0.00036856788984086536,
    -0.0003852746587076493,
    -0.0004023967345859967,
    -0.0004199367521573748,
    -0.00043789716092138394,
    -0.00045628022183522395,
    -0.00047508800404876255,
    -0.0004943223817362313,
    -0.000513985031028992,
    -0.000534077427049323,
    -0.0005546008410499576,
    -0.00057555633765968,
    -0.0005969447722391504,
    -0.0006187667883466325,
    -0.0006410228153187393,
    -0.0006637130659653367,
    -0.0006868375343827148,
    -0.0007103959938855186,
    -0.0007343879950605599,
    -0.0007588128639423595,
    -0.0007836697003145827,
    -0.000808957376136587,
    -0.0008346745340984707,
    -0.0008608195863042676,
    -0.0008873907130871259,
    -0.0009143858619546407,
    -0.0009418027466685016,
    -0.0009696388464575704,
    -0.0009978914053665028,
    -0.001026557431739953,
    -0.0010556336978448904,
    -0.0010851167396294546,
    -0.0011150028566212836,
    -0.001145288111964367,
    -0.0011759683325964323,
    -0.001207039109565029,
    -0.0012384957984857433,
    -0.0012703335201398852,
    -0.0013025471612140508,
    -0.0013351313751795164,
    -0.0013680805833145052,
    -0.0014013889758653232,
    -0.0014350505133499537,
    -0.001469058928000856,
    -0.0015034077253495049,
    -0.0015380901859483485,
    -0.001573099367234498,
    -0.0016084281055299236,
    -0.0016440690181806579,
    -0.001680014505832385,
    -0.0017162567548431344,
    -0.001752787739829419,
    -0.0017895992263484756,
    -0.0018266827737119492,
    -0.0018640297379323206,
    -0.0019016312747983414,
    -0.0019394783430816652,
    -0.001977561707868424,
    -0.002015871944018597,
    -0.0020543994397488083,
    -0.0020931344003377772,
    -0.002132066851951924,
    -0.002171186645591184,
    -0.0022104834611498254,
    -0.0022499468115931656,
    -0.0022895660472462844,
    -0.0023293303601941064,
    -0.0023692287887875493,
    -0.0024092502222577937,
    -0.002449383405432118,
    -0.002489616943551614,
    -0.0025299393071856044,
    -0.0025703388372443144,
    -0.002610803750081342,
    -0.002651322142688651,
    -0.002691881997977165,
    -0.00273247119014398,
    -0.0027730774901176102,
    -0.0028136885710856084,
    -0.0028542920140946417,
    -0.0028948753137242535,
    -0.002935425883829342,
    -0.0029759310633495463,
    -0.0030163781221789867,
    -0.003056754267098305,
    -0.0030970466477603506,
    -0.0031372423627304075,
    -0.0031773284655735564,
    -0.003217291970990476,
    -0.0032571198609925634,
    -0.0032967990911185775,
    -0.003336316596683963,
    -0.003375659299064115,
    -0.003414814112003601,
    -0.003453767947951477,
    -0.0034925077244157875,
    -0.00353102037033628,
    -0.0035692928324694974,
    -0.003607312081784809,
    -0.003645065119864356,
    -0.00368253898530755,
    -0.003719720760131893,
    -0.0037565975761704343,
    -0.003793156621457882,
    -0.0038293851466070544,
    -0.003865270471165334,
    -0.0039007999899541303,
    -0.003935961179381508,
    -0.0039707416037297535,
    -0.004005128921409362,
    -0.004039110891179716,
    -0.0040726753783295565,
    -0.004105810360816022,
    -0.0041385039353569915,
    -0.00417074432347492,
    -0.004202519877485317,
    -0.004233819086431044,
    -0.004264630581954024,
    -0.004294943144105093,
    -0.004324745707084047,
    -0.004354027364912662,
    -0.0043827773770293964,
    -0.0044109851738105684,
    -0.004438640362007371,
    -0.004465732730102527,
    -0.004492252253575829,
    -0.004518189100083366,
    -0.0045435336345397235,
    -0.004568276424106684,
    -0.004592408243080077,
    -0.004615920077675996,
    -0.004638803130710649,
    -0.004661048826173404,
    -0.004682648813686504,
    -0.004703594972855015,
    -0.004723879417496803,
    -0.00474349449975698,
    -0.004762432814098808,
    -0.004780687201172612,
    -0.004798250751558114,
    -0.0048151168093795525,
    -0.0048312789757878815,
    -0.004846731112314827,
    -0.004861467344088071,
    -0.004875482062913612,
    -0.004888769930216736,
    -0.0049013258798460005,
    -0.0049131451207331065,
    -0.004924223139411406,
    -0.004934555702386979,
    -0.00494413885836648,
    -0.004952968940335024,
    -0.004961042567486983,
    -0.0049683566470039514,
    -0.004974908375685564,
    -0.004980695241424286,
    -0.004985715024530265,
    -0.004989965798899803,
    -0.004993445933031774,
    -0.004996154090886416,
    -0.004998089232590966,
    -0.004999250614986708,
    0.9949279206123882,
    -0.004999250614986708,
    -0.004998089232590966,
    -0.004996154090886416,
    -0.004993445933031774,
    -0.004989965798899803,
    -0.004985715024530265,
    -0.004980695241424286,
    -0.004974908375685564,
    -0.0049683566470039514,
    -0.004961042567486983,
    -0.004952968940335024,
    -0.00494413885836648,
    -0.004934555702386979,
    -0.004924223139411406,
    -0.0049131451207331065,
    -0.0049013258798460005,
    -0.004888769930216736,
    -0.004875482062913612,
    -0.004861467344088071,
    -0.004846731112314827,
    -0.0048312789757878815,
    -0.0048151168093795525,
    -0.004798250751558114,
    -0.004780687201172612,
    -0.004762432814098808,
    -0.00474349449975698,
    -0.004723879417496803,
    -0.004703594972855015,
    -0.004682648813686504,
    -0.004661048826173404,
    -0.004638803130710649,
    -0.004615920077675996,
    -0.004592408243080077,
    -0.004568276424106684,
    -0.0045435336345397235,
    -0.004518189100083366,
    -0.004492252253575829,
    -0.004465732730102527,
    -0.004438640362007371,
    -0.0044109851738105684,
    -0.0043827773770293964,
    -0.004354027364912662,
    -0.004324745707084047,
    -0.004294943144105093,
    -0.004264630581954024,
    -0.004233819086431044,
    -0.004202519877485317,
    -0.00417074432347492,
    -0.0041385039353569915,
    -0.004105810360816022,
    -0.0040726753783295565,
    -0.004039110891179716,
    -0.004005128921409362,
    -0.0039707416037297535,
    -0.003935961179381508,
    -0.0039007999899541303,
    -0.003865270471165334,
    -0.0038293851466070544,
    -0.003793156621457882,
    -0.0037565975761704343,
    -0.003719720760131893,
    -0.00368253898530755,
    -0.003645065119864356,
    -0.003607312081784809,
    -0.0035692928324694974,
    -0.00353102037033628,
    -0.0034925077244157875,
    -0.003453767947951477,
    -0.003414814112003601,
    -0.003375659299064115,
    -0.003336316596683963,
    -0.0032967990911185775,
    -0.0032571198609925634,
    -0.003217291970990476,
    -0.0031773284655735564,
    -0.0031372423627304075,
    -0.0030970466477603506,
    -0.003056754267098305,
    -0.0030163781221789867,
    -0.0029759310633495463,
    -0.002935425883829342,
    -0.0028948753137242535,
    -0.0028542920140946417,
    -0.0028136885710856084,
    -0.0027730774901176102,
    -0.00273247119014398,
    -0.002691881997977165,
    -0.002651322142688651,
    -0.002610803750081342,
    -0.0025703388372443144,
    -0.0025299393071856044,
    -0.002489616943551614,
    -0.002449383405432118,
    -0.0024092502222577937,
    -0.0023692287887875493,
    -0.0023293303601941064,
    -0.0022895660472462844,
    -0.0022499468115931656,
    -0.0022104834611498254,
    -0.002171186645591184,
    -0.002132066851951924,
    -0.0020931344003377772,
    -0.0020543994397488083,
    -0.002015871944018597,
    -0.001977561707868424,
    -0.0019394783430816652,
    -0.0019016312747983414,
    -0.0018640297379323206,
    -0.0018266827737119492,
    -0.0017895992263484756,
    -0.001752787739829419,
    -0.0017162567548431344,
    -0.001680014505832385,
    -0.0016440690181806579,
    -0.0016084281055299236,
    -0.001573099367234498,
    -0.0015380901859483485,
    -0.0015034077253495049,
    -0.001469058928000856,
    -0.0014350505133499537,
    -0.0014013889758653232,
    -0.0013680805833145052,
    -0.0013351313751795164,
    -0.0013025471612140508,
    -0.0012703335201398852,
    -0.0012384957984857433,
    -0.001207039109565029,
    -0.0011759683325964323,
    -0.001145288111964367,
    -0.0011150028566212836,
    -0.0010851167396294546,
    -0.0010556336978448904,
    -0.001026557431739953,
    -0.0009978914053665028,
    -0.0009696388464575704,
    -0.0009418027466685016,
    -0.0009143858619546407,
    -0.0008873907130871259,
    -0.0008608195863042676,
    -0.0008346745340984707,
    -0.000808957376136587,
    -0.0007836697003145827,
    -0.0007588128639423595,
    -0.0007343879950605599,
    -0.0007103959938855186,
    -0.0006868375343827148,
    -0.0006637130659653367,
    -0.0006410228153187393,
    -0.0006187667883466325,
    -0.0005969447722391504,
    -0.00057555633765968,
    -0.0005546008410499576,
    -0.000534077427049323,
    -0.000513985031028992,
    -0.0004943223817362313,
    -0.00047508800404876255,
    -0.00045628022183522395,
    -0.00043789716092138394,
    -0.0004199367521573748,
    -0.0004023967345859967,
    -0.0003852746587076493,
    -0.00036856788984086536,
    -0.0003522736115743106,
    -0.0003363888293098085,
    -0.0003209103738907139,
    -0.0003058349053166775,
    -0.0002911589165379612,
    -0.00027687873732990133,
    -0.0002629905382428907,
    -0.00024949033462516227,
    -0.00023637399071590136,
    -0.00022363722380558862,
    -0.0002112756084600087,
    -0.0001992845808061992,
    -0.00018765944287527322,
    -0.00017639536700170936,
    -0.00016548740027273417,
    -0.00015493046902816164,
    -0.00014471938340456547,
    -0.00013484884192230197,
    -0.00012531343611176416,
    -0.00011610765517558831,
    -0.00010722589068343002,
    -9.866244129678497e-05,
    -9.041151751935303e-05,
    -8.246724647150896e-05,
    -7.48236766833604e-05,
    -6.747478290561463e-05,
    -6.0414470932953374e-05,
    -5.3636582437728634e-05,
    -4.71348998106753e-05,
    -4.09031510050883e-05,
    -3.493501438137083e-05,
    -2.9224123549048474e-05,
    -2.376407220230233e-05,
    -1.8548418947016692e-05,
    -1.3570692114602606e-05,
    -8.824394561385163e-06,
    -4.303008448363345e-06,
    1.0167628683001432e-18,
    4.091175762017783e-06,
    7.97707031284267e-06,
    1.1664236949327693e-05,
    1.5159226148556718e-05,
    1.846858096340466e-05,
    2.1598832457302275e-05,
    2.4556495182122354e-05,
    2.7348062700701086e-05,
    2.9980003158218195e-05,
    3.245875490399577e-05,
    3.4790722167014696e-05,
    3.698227078779654e-05,
    3.903972400903848e-05,
    4.096935832766672e-05,
    4.2777399410963796e-05,
    4.4470018078812074e-05,
    4.605332635511958e-05,
    4.7533373589867125e-05,
    4.8916142655179076e-05,
    5.0207546216447e-05,
    5.1413423081687174e-05,
    5.253953463068069e-05,
    5.359156132605094e-05,
    5.4575099308328615e-05,
    5.549565707693705e-05,
    5.6358652258738447e-05,
    5.7169408466336676e-05,
    5.7933152247245073e-05,
    5.865501012635674e-05,
    5.9340005742338975e-05,
    5.999305708047748e-05,
    6.061897380252971e-05,
    6.122245467546631e-05,
    6.180808510022202e-05,
    6.2380334741697e-05,
    6.294355526105214e-05,
    6.350197815161183e-05,
    6.405971267895249e-05,
    6.462074392665728e-05,
    6.518893094785323e-05,
    6.576800502414862e-05,
    6.636156803173764e-05,
    6.697309091607535e-05,
    6.760591227514852e-05,
    6.826323705200386e-05,
    6.894813533681396e-05,
    6.96635412789277e-05,
    7.041225210884141e-05,
    7.119692727065647e-05,
    7.202008766452209e-05;
    
    //reverse
    MatrixXcf B(hpf.rows(),1);
    
    for (int i = 0; i < hpf.rows(); i++) {
        B(i,0) = Complex_t(hpf(hpf.rows() - i - 1,0),0);
    }
    
    
    return PreprocessorPtr_t(new Preprocessor(B,num_range_bins,num_frames_in_segment,num_frames_to_wait_between_segments));
}

PreprocessorPtr_t Preprocessor::createWithPostiveFreqBandpass(const int num_range_bins,const int num_frames_in_segment,const int num_frames_to_wait_between_segments) {
    
    Eigen::MatrixXcf Bplus(101,1);
    Bplus << Complex_t(-0.00050952,0.00000000),
    Complex_t(-0.00037903,-0.00027538),
    Complex_t(-0.00010077,-0.00031015),
    Complex_t(0.00002887,-0.00008886),
    Complex_t(-0.00016347,0.00011877),
    Complex_t(-0.00051298,0.00000000),
    Complex_t(-0.00062538,-0.00045437),
    Complex_t(-0.00027979,-0.00086109),
    Complex_t(0.00025950,-0.00079865),
    Complex_t(0.00043250,-0.00031423),
    Complex_t(-0.00000000,0.00000000),
    Complex_t(-0.00055651,-0.00040433),
    Complex_t(-0.00042881,-0.00131974),
    Complex_t(0.00059134,-0.00181995),
    Complex_t(0.00167967,-0.00122035),
    Complex_t(0.00173464,-0.00000000),
    Complex_t(0.00068729,0.00049935),
    Complex_t(-0.00014853,-0.00045712),
    Complex_t(0.00062206,-0.00191450),
    Complex_t(0.00274473,-0.00199416),
    Complex_t(0.00422322,-0.00000000),
    Complex_t(0.00336890,0.00244765),
    Complex_t(0.00093747,0.00288522),
    Complex_t(-0.00027501,0.00084640),
    Complex_t(0.00156506,-0.00113708),
    Complex_t(0.00486387,-0.00000000),
    Complex_t(0.00580791,0.00421969),
    Complex_t(0.00252561,0.00777304),
    Complex_t(-0.00226606,0.00697420),
    Complex_t(-0.00364477,0.00264808),
    Complex_t(0.00000000,-0.00000000),
    Complex_t(0.00436664,0.00317255),
    Complex_t(0.00325466,0.01001680),
    Complex_t(-0.00435439,0.01340144),
    Complex_t(-0.01204412,0.00875057),
    Complex_t(-0.01216540,0.00000000),
    Complex_t(-0.00473819,-0.00344250),
    Complex_t(0.00101234,0.00311566),
    Complex_t(-0.00421923,0.01298544),
    Complex_t(-0.01866545,0.01356124),
    Complex_t(-0.02904749,0.00000000),
    Complex_t(-0.02367937,-0.01720407),
    Complex_t(-0.00681887,-0.02098633),
    Complex_t(0.00210290,-0.00647205),
    Complex_t(-0.01284019,0.00932895),
    Complex_t(-0.04402191,0.00000000),
    Complex_t(-0.06037056,-0.04386178),
    Complex_t(-0.03213448,-0.09889977),
    Complex_t(0.03966205,-0.12206725),
    Complex_t(0.11685663,-0.08490131),
    Complex_t(0.15006675,-0.00000000),
    Complex_t(0.11685663,0.08490131),
    Complex_t(0.03966205,0.12206725),
    Complex_t(-0.03213448,0.09889977),
    Complex_t(-0.06037056,0.04386178),
    Complex_t(-0.04402191,0.00000000),
    Complex_t(-0.01284019,-0.00932895),
    Complex_t(0.00210290,0.00647205),
    Complex_t(-0.00681887,0.02098633),
    Complex_t(-0.02367937,0.01720407),
    Complex_t(-0.02904749,0.00000000),
    Complex_t(-0.01866545,-0.01356124),
    Complex_t(-0.00421923,-0.01298544),
    Complex_t(0.00101234,-0.00311566),
    Complex_t(-0.00473819,0.00344250),
    Complex_t(-0.01216540,-0.00000000),
    Complex_t(-0.01204412,-0.00875057),
    Complex_t(-0.00435439,-0.01340144),
    Complex_t(0.00325466,-0.01001680),
    Complex_t(0.00436664,-0.00317255),
    Complex_t(0.00000000,-0.00000000),
    Complex_t(-0.00364477,-0.00264808),
    Complex_t(-0.00226606,-0.00697420),
    Complex_t(0.00252561,-0.00777304),
    Complex_t(0.00580791,-0.00421969),
    Complex_t(0.00486387,-0.00000000),
    Complex_t(0.00156506,0.00113708),
    Complex_t(-0.00027501,-0.00084640),
    Complex_t(0.00093747,-0.00288522),
    Complex_t(0.00336890,-0.00244765),
    Complex_t(0.00422322,-0.00000000),
    Complex_t(0.00274473,0.00199416),
    Complex_t(0.00062206,0.00191450),
    Complex_t(-0.00014853,0.00045712),
    Complex_t(0.00068729,-0.00049935),
    Complex_t(0.00173464,0.00000000),
    Complex_t(0.00167967,0.00122035),
    Complex_t(0.00059134,0.00181995),
    Complex_t(-0.00042881,0.00131974),
    Complex_t(-0.00055651,0.00040433),
    Complex_t(-0.00000000,0.00000000),
    Complex_t(0.00043250,0.00031423),
    Complex_t(0.00025950,0.00079865),
    Complex_t(-0.00027979,0.00086109),
    Complex_t(-0.00062538,0.00045437),
    Complex_t(-0.00051298,0.00000000),
    Complex_t(-0.00016347,-0.00011877),
    Complex_t(0.00002887,0.00008886),
    Complex_t(-0.00010077,0.00031015),
    Complex_t(-0.00037903,0.00027538),
    Complex_t(-0.00050952,0.00000000);
 
    
    //reverse
    MatrixXcf B(Bplus.rows(),1);
    
    for (int i = 0; i < Bplus.rows(); i++) {
        B(i,0) = Bplus(Bplus.rows() - i - 1,0);
    }
    
    return PreprocessorPtr_t(new Preprocessor(B,num_range_bins,num_frames_in_segment,num_frames_to_wait_between_segments));

    
}

PreprocessorPtr_t Preprocessor::createWithNegativeFreqBandpass(const int num_range_bins,const int num_frames_in_segment,const int num_frames_to_wait_between_segments) {
    
    Eigen::MatrixXcf Bminus(101,1);
    Bminus << Complex_t(-0.00050952,0.00000000),
    Complex_t(-0.00037903,0.00027538),
    Complex_t(-0.00010077,0.00031015),
    Complex_t(0.00002887,0.00008886),
    Complex_t(-0.00016347,-0.00011877),
    Complex_t(-0.00051298,-0.00000000),
    Complex_t(-0.00062538,0.00045437),
    Complex_t(-0.00027979,0.00086109),
    Complex_t(0.00025950,0.00079865),
    Complex_t(0.00043250,0.00031423),
    Complex_t(-0.00000000,-0.00000000),
    Complex_t(-0.00055651,0.00040433),
    Complex_t(-0.00042881,0.00131974),
    Complex_t(0.00059134,0.00181995),
    Complex_t(0.00167967,0.00122035),
    Complex_t(0.00173464,0.00000000),
    Complex_t(0.00068729,-0.00049935),
    Complex_t(-0.00014853,0.00045712),
    Complex_t(0.00062206,0.00191450),
    Complex_t(0.00274473,0.00199416),
    Complex_t(0.00422322,0.00000000),
    Complex_t(0.00336890,-0.00244765),
    Complex_t(0.00093747,-0.00288522),
    Complex_t(-0.00027501,-0.00084640),
    Complex_t(0.00156506,0.00113708),
    Complex_t(0.00486387,0.00000000),
    Complex_t(0.00580791,-0.00421969),
    Complex_t(0.00252561,-0.00777304),
    Complex_t(-0.00226606,-0.00697420),
    Complex_t(-0.00364477,-0.00264808),
    Complex_t(0.00000000,0.00000000),
    Complex_t(0.00436664,-0.00317255),
    Complex_t(0.00325466,-0.01001680),
    Complex_t(-0.00435439,-0.01340144),
    Complex_t(-0.01204412,-0.00875057),
    Complex_t(-0.01216540,-0.00000000),
    Complex_t(-0.00473819,0.00344250),
    Complex_t(0.00101234,-0.00311566),
    Complex_t(-0.00421923,-0.01298544),
    Complex_t(-0.01866545,-0.01356124),
    Complex_t(-0.02904749,-0.00000000),
    Complex_t(-0.02367937,0.01720407),
    Complex_t(-0.00681887,0.02098633),
    Complex_t(0.00210290,0.00647205),
    Complex_t(-0.01284019,-0.00932895),
    Complex_t(-0.04402191,-0.00000000),
    Complex_t(-0.06037056,0.04386178),
    Complex_t(-0.03213448,0.09889977),
    Complex_t(0.03966205,0.12206725),
    Complex_t(0.11685663,0.08490131),
    Complex_t(0.15006675,0.00000000),
    Complex_t(0.11685663,-0.08490131),
    Complex_t(0.03966205,-0.12206725),
    Complex_t(-0.03213448,-0.09889977),
    Complex_t(-0.06037056,-0.04386178),
    Complex_t(-0.04402191,-0.00000000),
    Complex_t(-0.01284019,0.00932895),
    Complex_t(0.00210290,-0.00647205),
    Complex_t(-0.00681887,-0.02098633),
    Complex_t(-0.02367937,-0.01720407),
    Complex_t(-0.02904749,-0.00000000),
    Complex_t(-0.01866545,0.01356124),
    Complex_t(-0.00421923,0.01298544),
    Complex_t(0.00101234,0.00311566),
    Complex_t(-0.00473819,-0.00344250),
    Complex_t(-0.01216540,0.00000000),
    Complex_t(-0.01204412,0.00875057),
    Complex_t(-0.00435439,0.01340144),
    Complex_t(0.00325466,0.01001680),
    Complex_t(0.00436664,0.00317255),
    Complex_t(0.00000000,0.00000000),
    Complex_t(-0.00364477,0.00264808),
    Complex_t(-0.00226606,0.00697420),
    Complex_t(0.00252561,0.00777304),
    Complex_t(0.00580791,0.00421969),
    Complex_t(0.00486387,0.00000000),
    Complex_t(0.00156506,-0.00113708),
    Complex_t(-0.00027501,0.00084640),
    Complex_t(0.00093747,0.00288522),
    Complex_t(0.00336890,0.00244765),
    Complex_t(0.00422322,0.00000000),
    Complex_t(0.00274473,-0.00199416),
    Complex_t(0.00062206,-0.00191450),
    Complex_t(-0.00014853,-0.00045712),
    Complex_t(0.00068729,0.00049935),
    Complex_t(0.00173464,-0.00000000),
    Complex_t(0.00167967,-0.00122035),
    Complex_t(0.00059134,-0.00181995),
    Complex_t(-0.00042881,-0.00131974),
    Complex_t(-0.00055651,-0.00040433),
    Complex_t(-0.00000000,-0.00000000),
    Complex_t(0.00043250,-0.00031423),
    Complex_t(0.00025950,-0.00079865),
    Complex_t(-0.00027979,-0.00086109),
    Complex_t(-0.00062538,-0.00045437),
    Complex_t(-0.00051298,-0.00000000),
    Complex_t(-0.00016347,0.00011877),
    Complex_t(0.00002887,-0.00008886),
    Complex_t(-0.00010077,-0.00031015),
    Complex_t(-0.00037903,-0.00027538),
    Complex_t(-0.00050952,-0.00000000);
    
    
    //reverse
    MatrixXcf B(Bminus.rows(),1);
    
    for (int i = 0; i < Bminus.rows(); i++) {
        B(i,0) = Bminus(Bminus.rows() - i - 1,0);
    }
    
    return PreprocessorPtr_t(new Preprocessor(B,num_range_bins,num_frames_in_segment,num_frames_to_wait_between_segments));

}


Preprocessor::Preprocessor(const MatrixXcf & high_pass_filter_coeff,const int num_range_bins,const int num_frames_in_segment,const int num_frames_to_wait_between_segments)
:_num_frames_in_segment(num_frames_in_segment)
,_num_frames_to_wait_between_segments(num_frames_to_wait_between_segments)
,_input_idx(0)
,_output_idx(0)
,_is_input_full(false)
,_idx_sample(0)
{
    
    _high_pass_filter_coeff = high_pass_filter_coeff;
    _input_circular_buffer = MatrixXcf::Zero(_high_pass_filter_coeff.rows(),num_range_bins);
    _output_circular_buffer = MatrixXcf::Zero(_num_frames_in_segment,num_range_bins);
    _num_frames_to_wait_between_segments = num_frames_in_segment;
    _num_frames_in_segment = num_frames_in_segment;
    
}

Preprocessor::~Preprocessor() {
    
}
 
void Preprocessor::reset() {
    _input_idx = 0;
    _output_idx = 0;
    _idx_sample = 0;
}


uint32_t Preprocessor::add_frame(const BasebandDataFrame_t & input, MatrixXcf & filtered_frame, MatrixXcf & segment)  {
    uint32_t flags = PREPROCESSOR_FLAGS_NOT_READY;
    MatrixXcf input_row(1,input.data.size());
    
    //copy
    for (int i = 0; i < input.data.size(); i++) {
        _input_circular_buffer(_input_idx,i) = input.data[i];
    }
    
    if (++_input_idx >= _input_circular_buffer.rows()) {
        _input_idx = 0;
        _is_input_full = true;
    }
    
    if (_is_input_full) {
        flags |= PREPROCESSOR_FLAGS_FRAME_READY;
    }
    
    //circular shift FIR filter coefficients
    const MatrixXcf B = circular_shift_columns(_high_pass_filter_coeff,_input_idx);
    
    filtered_frame = fir_filter_columns(B, _input_circular_buffer);
    
    //insert
    _output_circular_buffer.row(_output_idx) = filtered_frame;
    
    if (++_output_idx >= _output_circular_buffer.rows()) {
        _output_idx = 0;
    }
    
    _idx_sample++;
    
    // we have enough points for a segment ?
    if (_idx_sample < _num_frames_in_segment) {
        return flags;
    }
    
    //we've hit a segment period?
    if (_idx_sample % _num_frames_to_wait_between_segments != 0) {
        return flags;
    }
    
    flags |= PREPROCESSOR_FLAGS_SEGMENT_READY;
    
    //copy
    segment = _output_circular_buffer;
    
    return flags;
    
}



